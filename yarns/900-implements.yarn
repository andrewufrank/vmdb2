IMPLEMENTS for all scenario steps
=============================================================================

This chapter contains the implementations for all scenario steps.

    IMPLEMENTS GIVEN a specification file called (\S+) containing (.+)
    filename = get_next_match()
    spec = get_next_match()
    open(filename, 'w').write(spec)

    IMPLEMENTS WHEN user runs vmdb2 (.*)
    args = get_next_match()
    vmdb2 = os.path.join(srcdir, 'vmdb2')
    p = subprocess.Popen(
      [vmdb2] + args.split(),
      stdin=subprocess.DEVNULL,
      stdout=subprocess.PIPE,
      stderr=subprocess.PIPE)
    out, err = p.communicate()
    vars['exit'] = p.returncode
    vars['stdout'] = out.decode()
    vars['stderr'] = err.decode()

    IMPLEMENTS THEN exit code is (\d+)
    wanted = int(get_next_match())
    exit = vars['exit']
    print('exit code', exit)
    print('stdout:', vars['stdout'])
    print('stderr:', vars['stderr'])
    assertEqual(exit, wanted)

    IMPLEMENTS THEN stdout contains "(.+)" followed by "(.+)"
    first = get_next_match()
    second = get_next_match()
    stdout = vars['stdout']
    first_i = stdout.find(first)
    assertGreaterThan(first_i, 0)
    rest = stdout[first_i + len(first):]
    second_i = rest.find(second)
    assertGreaterThan(second_i, -1)

    IMPLEMENTS THEN stdout does NOT contain "(\S+)"
    what = get_next_match()
    stdout = vars['stdout']
    i = stdout.find(what)
    assertEqual(i, -1)
